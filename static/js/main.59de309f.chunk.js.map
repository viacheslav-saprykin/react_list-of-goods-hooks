{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","getReorderedGoods","goods","isReversed","sortType","visibleGoods","sort","g1","g2","LENGTH","length","ALPHABET","localeCompare","reverse","App","useState","setReversed","NONE","setType","sortByAlphabet","typeOfSort","className","type","classNames","onClick","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,UAcK,SAASC,EACdC,EADK,GAGJ,IADCC,EACF,EADEA,WAAYC,EACd,EADcA,SAERC,EAAY,YAAOH,GAmBzB,OAjBAG,EAAaC,MAAK,SAACC,EAAIC,GACrB,OAAQJ,GACN,KAAKL,EAASU,OACZ,OAAOF,EAAGG,OAASF,EAAGE,OAExB,KAAKX,EAASY,SACZ,OAAOJ,EAAGK,cAAcJ,GAE1B,QACE,OAAO,MAITL,GACFE,EAAaQ,UAGRR,G,SAlCJN,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAqCE,IAAMe,EAAgB,WAC3B,MAAkCC,oBAAS,GAA3C,mBAAOZ,EAAP,KAAmBa,EAAnB,KACA,EAA4BD,mBAAShB,EAASkB,MAA9C,mBAAOb,EAAP,KAAiBc,EAAjB,KAOMC,EAAiB,SAACC,GAAD,OAA0B,kBAAMF,EAAQE,KAE/D,OACE,sBAAKC,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IACT,SACA,UACA,CACE,WAAYnB,IAAaL,EAASY,WAItCa,QAASL,EAAepB,EAASY,UAVnC,iCAeA,wBACEW,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CACE,WAAYnB,IAAaL,EAASU,SAGtCe,QAASL,EAAepB,EAASU,QATnC,4BAcA,wBACEa,KAAK,SACLD,UAAWE,IACT,SACA,aACA,CACE,YAAapB,IAGjBqB,QAAS,kBAAMR,GAAab,IAT9B,sBAcEC,IAAaL,EAASkB,MAAQd,IAC9B,wBACEmB,KAAK,SACLD,UAAU,4BACVG,QAzDM,WACdN,EAAQnB,EAASkB,MACjBD,GAAY,IAoDN,sBAUJ,6BACGf,EAAkBD,EAAiB,CAAEG,aAAYC,aAC/CqB,KAAI,SAACC,GAAD,OACH,oBAAI,UAAQ,OAAZ,SACGA,GADqBA,YC3HpCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.59de309f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\ntype State = {\n  isReversed: boolean,\n  sortType: SortType,\n};\n\nexport function getReorderedGoods(\n  goods: string[],\n  { isReversed, sortType }: State,\n) {\n  const visibleGoods = [...goods];\n\n  visibleGoods.sort((g1, g2) => {\n    switch (sortType) {\n      case SortType.LENGTH:\n        return g1.length - g2.length;\n\n      case SortType.ALPHABET:\n        return g1.localeCompare(g2);\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setReversed] = useState(false);\n  const [sortType, setType] = useState(SortType.NONE);\n\n  const onReset = () => {\n    setType(SortType.NONE);\n    setReversed(false);\n  };\n\n  const sortByAlphabet = (typeOfSort: SortType) => () => setType(typeOfSort);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-info',\n            {\n              'is-light': sortType !== SortType.ALPHABET,\n            },\n          )}\n          // onClick={this.sortByAlphabet}\n          onClick={sortByAlphabet(SortType.ALPHABET)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-success',\n            {\n              'is-light': sortType !== SortType.LENGTH,\n            },\n          )}\n          onClick={sortByAlphabet(SortType.LENGTH)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={classNames(\n            'button',\n            'is-warning',\n            {\n              'is-light': !isReversed,\n            },\n          )}\n          onClick={() => setReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(sortType !== SortType.NONE || isReversed) && (\n          <button\n            type=\"button\"\n            className=\"button is-danger is-light\"\n            onClick={onReset}\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {getReorderedGoods(goodsFromServer, { isReversed, sortType })\n          .map((good) => (\n            <li data-cy=\"Good\" key={good}>\n              {good}\n            </li>\n          ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}